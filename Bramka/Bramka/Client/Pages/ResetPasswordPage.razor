@page "/reset-password"
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

@if(isChanged)
{
    <h3>Password is changed</h3>

    <p>You can close this page.</p>
}
else
{
    <h3>Reset Password Page</h3>

    <EditForm Model="passwordForm" OnValidSubmit="ChangePassword" class="col-4">
        <div class="form-group mb-3">
            <label>New password</label>
            <InputText type="password" class="form-control" @bind-Value="passwordForm.Password"></InputText>
        </div>
        <div class="form-group mb-3">
             <label>Repeat password</label>
            <InputText type="password" class="form-control" @bind-Value="passwordForm.RepeatPassword"></InputText>
        </div>
        <button class="btn btn-primary" type="submit">Change</button>
    </EditForm> 
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}


@code {
    private string errorMessage { get; set; } = string.Empty;
    private bool isChanged = false;
    private ResetPasswordDTO passwordForm = new();
    [Parameter, SupplyParameterFromQuery] public string Code { get; set; } = string.Empty;

    private async Task ChangePassword()
    {
        var response = await HttpClient.PostAsJsonAsync<ResetPasswordDTO>(HttpClient.BaseAddress + $"api/User/reset-password/confirm?code={Code}", passwordForm);

        if (response.IsSuccessStatusCode)
        {
            isChanged = !isChanged;
            errorMessage = string.Empty;

            await LocalStorage.RemoveItemAsync("token");
            await AuthStateProvider.GetAuthenticationStateAsync();

            await HttpClient.PostAsync(HttpClient.BaseAddress + "api/Auth/delete/refresh-token", null);
        }
        else
            errorMessage = await response.Content.ReadAsStringAsync();

    }
}

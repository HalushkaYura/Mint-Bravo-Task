@page "/admin"
@using Bramka.Shared.Models
@* @attribute [Authorize(Roles = "Admin")] *@
<div class="style-wrapper">
    <Header/>
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Facultet" Click="@InsertRow" Disabled=@(UserToInsert != null || UserToUpdate != null) />



    <RadzenDataGrid @ref="UsersGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@Users" TItem="User" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">

        <Columns>
            <RadzenDataGridColumn TItem="User" Property="Id" Title="id" Width="30px" Frozen="true">
                <Template Context="user">
                    <p style="margin-bottom: 0;">@user.UserId</p>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Createt at">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.CreatedAt</p>
                </Template>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="User" Property="Name">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.Name</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.Name" Style="width:150px; display: block; text-wrap: wrap;" Name="name" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Surname">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.Name</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.Name" Style="width:150px; display: block; text-wrap: wrap;" Name="name" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Email">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.Email</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.Email" Style="width:150px; display: block; text-wrap: wrap;" Name="name" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Phone Number">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.PhoneNumber</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenTextBox @bind-Value="user.PhoneNumber" Style="width:150px; display: block; text-wrap: wrap;" Name="name" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Birth Date">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@user.BirthDate</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenDatePicker @bind-Value="user.BirthDate" Style="width:150px; display: block; text-wrap: wrap;" Name="name" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="User" Property="Role">
                <Template Context="user">
                    <p style="white-space:pre-wrap; margin-bottom: 0;">@Roles.Where(x => x.RoleId == user.RoleId).FirstOrDefault().Name</p>
                </Template>
                <EditTemplate Context="user">
                    <RadzenDropDown @bind-Value="user.RoleId" Data="@Roles" TextProperty="Name" ValueProperty="RoleId" Style="width:100%; display: block;" />
                    <RadzenRequiredValidator Text="User Name is required" Component="name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>



@*             <RadzenDataGridColumn TItem="User" Property="name" Title="Departaments">
                <Template Context="user">

                    @foreach (var item in departamentAndFacultets)
                    {
                        if (item.facultet_id == facultet.Id)
                        {
                            <p style="text-wrap: wrap">@departaments.Where(x => x.Id == item.departament_id).FirstOrDefault().name</p>
                        }
                    }
                </Template>
                <EditTemplate Context="facultet">
                    <div class="CheckBoxListEditor" d-flex>
                        <div class="TextBoxs" d-flex>
                            @if (facultet.Id > 0)
                            {
                                @foreach (var item in departaments)
                                {
                                    <RadzenTextBox @bind-Value="item.name" Change=@SaveDepartamentName Style="width:150px; display: block;" Name="name"></RadzenTextBox>
                                }
                            }
                        </div>
                        <RadzenCheckBoxList @onload="()=>UpdateUDList(facultet.Id)" @bind-Value=@updatedDapartaments TValue="Departament" Style="margin-top: 12px; margin-left: 15px" Orientation=Orientation.Vertical class="w-50">
                            <Items>
                                @if (facultet.Id > 0)
                                {
                                    @foreach (var item in departaments)
                                    {
                                        <RadzenCheckBoxListItem Text=@item.name Value=@item Style="margin-bottom: 19px; margin-top: 0px; align-items: flex-start;" />
                                    }
                                }
                            </Items>
                        </RadzenCheckBoxList>
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn> *@


            <RadzenDataGridColumn TItem="User" Context="user" Width="80px" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="user">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="user">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    private List<User> Users = new List<User>
    {
        new User
        {
            UserId = Guid.NewGuid(),
            Name = "user name",
            Surname = "surname",
            BirthDate = DateTime.Now,
            Email = "email",
            CreatedAt = DateTime.Now,
            PhoneNumber = "+3423432043242",
            RoleId = 1
        }
    };
    private List<Role> Roles = new List<Role> { new Role { RoleId = 1, Name ="Default User" } };
    RadzenDataGrid<User> UsersGrid;
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
    User? UserToInsert;
    User? UserToUpdate;
    void Reset()
    {
        UserToInsert = null;
        UserToUpdate = null;
    }
    async Task EditRow(User user)
    {
        // UpdateUDList(facultet.Id);
        UserToUpdate = user;
        await UsersGrid.EditRow(user);
    }
    void OnUpdateRow(User user)
    {
        Reset();
        // FacultetsDataAcces.Update(facultet);
    }

    async Task SaveRow(User user)
    {


        await UsersGrid.UpdateRow(user);
        // facultets = (await FacultetsDataAcces.GetAll());
        Reset();
        await UsersGrid.Reload();



    }

    void CancelEdit(User user)
    {
        Reset();

        UsersGrid.CancelEditRow(user);
    }

    async Task DeleteRow(User user)
    {
        Reset();
        // if (facultets.Contains(facultet))
        // {
        //     await FacultetsDataAcces.Delete(facultet.Id);
        //     facultets = facultets.Where(x => x != facultet).ToList();
        //     await facultetsGrid.Reload();
        // }
        // else
        // {
        //     facultetsGrid.CancelEditRow(facultet);

        // }
    }

    async Task InsertRow()
    {
        UserToInsert = new User();
        await UsersGrid.InsertRow(UserToInsert);
    }

    async void OnCreateRow(User user)
    {
        // await FacultetsDataAcces.Add(user);
        Reset();
    }

}

@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory Factory
@inject ILocalStorageService LocalStorage

<div class="style-wrapper">
    <h1>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Culpa, fugit!</h1>
    <div style="height: 100%; display: block;">

        <div class="login d-flex flex-column align-items-center mb-5">
            <span class="paragraph" style="margin-bottom: 2vh;">FORGOT PASSWORD</span>
                @if (messageSent)
                {
                    <p class="text-white" style="text-align:center;">Message was sent to your email to reset password</p>
                }
                else
                {
                    <div class="d-flex flex-column">
                        <input type="email" id="email" class="form-control" @bind-value="email" placeholder="email"></input>
                    </div>

                    <button @onclick="ResetPassword" class="btn-purple mt-4" disabled="@btnClicked"><span>SEND</span></button>
                }            
            <span style="font-weight: 500;">or</span>
            <button style="border: none; background-color: transparent">
                <span @onclick="ShowLogin">login</span>
            </button>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public EventCallback ShowLogin { get; set; }
    [Parameter] 
    public EventCallback ShowNewPassword { get; set; }

    private string email = string.Empty;
    private string errorMessage = string.Empty;
    private bool messageSent = false;
    private bool btnClicked = false;
    private bool isError = false;

    private async Task ResetPassword()
    {
        Console.WriteLine(email);
        btnClicked = true;
        isError = false;

        var _httpClient = Factory.CreateClient("SecuredServer");

        var result = await _httpClient.PostAsJsonAsync<string>(_httpClient.BaseAddress + "api/User/reset-password", email);

        if (result.IsSuccessStatusCode)
        {
            messageSent = true;
        }
        else
        {
            isError = true;
            errorMessage = await result.Content.ReadAsStringAsync();
        }

        await HttpClient.PostAsync(HttpClient.BaseAddress + "api/Auth/delete/refresh-token", null);

        btnClicked = false;
    }
}

@page "/counter"
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject IHttpClientFactory Factory
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="CheckUser">Check User</button>
<button class="btn btn-primary" @onclick="CheckAdmin">Check Admin</button>
<button class="btn btn-primary" @onclick="ResetPassword">Reset password</button>

<p>@text</p>

<AuthorizeView Roles="Admin">
    <Authorized>
        you're admin
    </Authorized>
    <NotAuthorized>
        you're not admin
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentCount = 0;
    private string text = "aboba";
    private bool isShowed = false;

    // protected override async Task OnInitializedAsync()
    // {
    //     var result = await AuthService.IsExpiredTokenAsync();
    //     if (result)
    //     {
    //         NavManager.NavigateTo("/login");
    //     }
    // }


    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task CheckAdmin()
    {
        var _httpClient = Factory.CreateClient("SecuredServer");
        var result = await _httpClient.PostAsync(_httpClient.BaseAddress + "api/Auth/check-admin", null);

        if (result.IsSuccessStatusCode)
        {
            text = "You're admin";
            StateHasChanged();
        }
        else
        {
            text = "You're not admin";
            StateHasChanged();
        }
    }

    private async Task CheckUser()
    {
        // var result = await HttpClient.PostAsync(HttpClient.BaseAddress + "api/Auth/check-user", null);


        var _httpClient = Factory.CreateClient("SecuredServer");
        var result = await _httpClient.PostAsync(_httpClient.BaseAddress + "api/Auth/check-user", null);

        if (result.IsSuccessStatusCode)
        {
            text = "You're user";
            StateHasChanged();
        }
        else if(result.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavManager.NavigateTo("/login");
        }
        else
        {
            text = "You're not user";
            StateHasChanged();
        }
    }

    private async Task ResetPassword()
    {
        var _httpClient = Factory.CreateClient("SecuredServer");
        var result = await _httpClient.PostAsync(_httpClient.BaseAddress + "api/User/reset-password", null);

        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();

        await HttpClient.PostAsync(HttpClient.BaseAddress + "api/Auth/delete/refresh-token", null);
    }
}
